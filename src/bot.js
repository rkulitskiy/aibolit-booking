const { Telegraf, session } = require('telegraf');
const database = require('./database');
const eventBus = require('./eventBus');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Å—Å–∏–∏
bot.use(session());

bot.start(async (ctx) => {
    const user = {
        id: ctx.from.id,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        username: ctx.from.username,
    };

    try {
        await database.addUser(user);
        ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –¥–æ–∫—Ç–æ—Ä–∞–º. –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

bot.command('adddoctor', (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ assignmentId –¥–æ–∫—Ç–æ—Ä–∞:');
    ctx.session.stage = 'awaiting_assignmentId';
});

bot.command('showdoctors', async (ctx) => {
    try {
        const doctors = await database.getAllDoctors();
        let message = '<b>–°–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤:</b>\n';
        doctors.forEach((doc, index) => {
            const statusEmoji = doc.isEnabled ? 'üü¢' : 'üî¥';
            message += `${statusEmoji} ${doc.fullName} - ${doc.position}. (<b>ID:</b> <code>${doc._id}</code>)\n`;
        });
        ctx.replyWithHTML(message); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ replyWithHTML –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤.');
    }
});


bot.command('toggledoctor', (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ id –¥–æ–∫—Ç–æ—Ä–∞:');
    ctx.session.stage = 'awaiting_doctor_id';
});

bot.on('text', async (ctx) => {
    if (!ctx.session.stage) {
        return; // –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    switch (ctx.session.stage) {
        case 'awaiting_assignmentId':
            ctx.session.doctor = { assignmentId: ctx.message.text };
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ physicianId –¥–æ–∫—Ç–æ—Ä–∞:');
            ctx.session.stage = 'awaiting_physicianId';
            break;
        case 'awaiting_physicianId':
            ctx.session.doctor.physicianId = ctx.message.text;
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ–∫—Ç–æ—Ä–∞:');
            ctx.session.stage = 'awaiting_position';
            break;
        case 'awaiting_position':
            ctx.session.doctor.position = ctx.message.text;
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–∫—Ç–æ—Ä–∞:');
            ctx.session.stage = 'awaiting_fullName';
            break;
        case 'awaiting_fullName':
            ctx.session.doctor.fullName = ctx.message.text;
            ctx.session.doctor.isEnabled = true;
            try {
                await database.addDoctor(ctx.session.doctor);

                // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                eventBus.emit('update-schedule');

                ctx.reply('–î–æ–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—Ç–æ—Ä–∞:', error);
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—Ç–æ—Ä–∞.');
            }
            ctx.session.stage = undefined; // –û—á–∏—â–∞–µ–º —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
            break;
        case 'awaiting_doctor_id':
            const doctorId = ctx.message.text;
            try {
                const updatedDoctor = await database.toggleDoctorEnabledState(doctorId);
                ctx.reply(`–î–æ–∫—Ç–æ—Ä ${updatedDoctor.fullName} —Ç–µ–ø–µ—Ä—å ${updatedDoctor.isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}.`);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—Ç–æ—Ä–∞:', error);
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—Ç–æ—Ä–∞.');
            }
            ctx.session.stage = undefined; // –û—á–∏—â–∞–µ–º —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
            break;
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function launchBot() {
    await bot.launch();
    console.log('Telegram bot launched');
}

// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç scheduler.js —á–µ—Ä–µ–∑ eventBus
eventBus.on('notifyUser', (data) => {
    bot.telegram.sendMessage(data.userId, data.message, { parse_mode: 'HTML' }).catch(error => {
        console.error(`Error sending notification to user ${data.userId}:`, error);
    });
});


module.exports = { launchBot };