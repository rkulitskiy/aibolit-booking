const { Telegraf, session, Markup } = require('telegraf');
const database = require('./database');
const eventBus = require('./eventBus');
const moment = require('moment');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Å—Å–∏–∏
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
bot.use((ctx, next) => {
    if (!ctx.session) {
        ctx.session = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    }
    return next();
});

bot.start(async (ctx) => {
    const user = {
        id: ctx.from.id,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        username: ctx.from.username,
    };

    try {
        await database.addUser(user);
        ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –¥–æ–∫—Ç–æ—Ä–∞–º. –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

bot.command('adddoctor', (ctx) => {
    if (!ctx.session) {
        ctx.session = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    }
    console.log(ctx.session);
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ assignmentId –¥–æ–∫—Ç–æ—Ä–∞:');
    ctx.session.stage = 'awaiting_assignmentId';
    console.log(ctx.session);
});

bot.command('showdoctors', async (ctx) => {
    try {
        const doctors = await database.getAllDoctors();
        let message = '<b>–°–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤:</b>\n';
        doctors.forEach((doc, index) => {
            const statusEmoji = doc.isEnabled ? 'üü¢' : 'üî¥';
            message += `${statusEmoji} ${doc.fullName} - ${doc.position}\n`;
        });
        ctx.replyWithHTML(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤.');
    }
});

bot.command('toggledoctor', async (ctx) => {
    try {
        const doctors = await database.getAllDoctors();
        if (doctors.length === 0) {
            return ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ–∫—Ç–æ—Ä–æ–≤.');
        }

        const buttons = doctors.map(doctor =>
            Markup.button.callback(`${doctor.isEnabled ? 'üü¢' : 'üî¥'} ${doctor.fullName}`, `toggle_${doctor._id.toString()}`)
        );

        const inlineKeyboard = Markup.inlineKeyboard(buttons, {columns: 1});
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', inlineKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤.');
    }
});

bot.action(/^toggle_(.+)/, async (ctx) => {
    const doctorId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—Ç–æ—Ä–∞ –∏–∑ callback_data –∫–Ω–æ–ø–∫–∏
    try {
        const updatedDoctor = await database.toggleDoctorEnabledState(doctorId);
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–∏—Å–µ–ª "—á–∞—Å–∏–∫" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
        await ctx.answerCbQuery(`–°—Ç–∞—Ç—É—Å –¥–æ–∫—Ç–æ—Ä–∞ '${updatedDoctor.fullName}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${updatedDoctor.isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}.`);

        // –ó–∞—Ç–µ–º –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            await ctx.editMessageText(`–î–æ–∫—Ç–æ—Ä ${updatedDoctor.fullName} –±—ã–ª —É—Å–ø–µ—à–Ω–æ ${updatedDoctor.isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}.`);
        } catch (error) {
            if (error.response && error.response.error_code === 400 && error.response.description.startsWith("Bad Request: message is not modified")) {
                console.log("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
            } else {
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                throw error;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—Ç–æ—Ä–∞:', error);
    }
});

bot.command('slots', async (ctx) => {
    try {
        const doctors = await database.getAllDoctors();
        if (doctors.length === 0) {
            return ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ–∫—Ç–æ—Ä–æ–≤.');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞
        const buttons = doctors.map((doctor) =>
            Markup.button.callback(`${doctor.fullName}`, `slots_${doctor._id}`)
        );

        const inlineKeyboard = Markup.inlineKeyboard(buttons, { columns: 1 });
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—Ç–æ—Ä–∞:', inlineKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤.');
    }
});

bot.action(/^slots_(.+)$/, async (ctx) => {
    const doctorId = ctx.match[1];
    try {
        const doctor = await database.getDoctorById(doctorId);
        const slots = await database.getActualSlotsForDoctor(doctor);

        if (slots && slots.length > 0) {
            let message = `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞ <b>${doctor.fullName}</b> –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏:\n`;
            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º
            const slotsByDate = slots.reduce((acc, slot) => {
                const date = moment(slot.start).format('DD.MM.YYYY');
                if (!acc[date]) {
                    acc[date] = [];
                }
                acc[date].push(slot);
                return acc;
            }, {});

            Object.entries(slotsByDate).forEach(([date, slots]) => {
                message += `\n<b>üìÖ ${date}:</b>\n`;
                slots.forEach(slot => {
                    message += ` üïí ${moment(slot.start).format('HH:mm')}\n`;
                });
            });

            await ctx.editMessageText(message, { parse_mode: 'HTML' });
        } else {
            await ctx.answerCbQuery('–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.');
    }
});

bot.on('text', async (ctx) => {
    if (!ctx.session) {
        ctx.session = {}; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    }

    if (!ctx.session.stage) {
        return; // –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    switch (ctx.session.stage) {
        case 'awaiting_assignmentId':
            ctx.session.doctor = { assignmentId: ctx.message.text };
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ physicianId –¥–æ–∫—Ç–æ—Ä–∞:');
            ctx.session.stage = 'awaiting_physicianId';
            break;
        case 'awaiting_physicianId':
            ctx.session.doctor.physicianId = ctx.message.text;
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ–∫—Ç–æ—Ä–∞:');
            ctx.session.stage = 'awaiting_position';
            break;
        case 'awaiting_position':
            ctx.session.doctor.position = ctx.message.text;
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–∫—Ç–æ—Ä–∞:');
            ctx.session.stage = 'awaiting_fullName';
            break;
        case 'awaiting_fullName':
            ctx.session.doctor.fullName = ctx.message.text;
            ctx.session.doctor.isEnabled = true;
            try {
                await database.addDoctor(ctx.session.doctor);

                // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                eventBus.emit('update-schedule');

                ctx.reply('–î–æ–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—Ç–æ—Ä–∞:', error);
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—Ç–æ—Ä–∞.');
            }
            ctx.session.stage = undefined; // –û—á–∏—â–∞–µ–º —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
            break;
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function launchBot() {
    await bot.launch();
    console.log('Telegram bot launched');
}

// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç scheduler.js —á–µ—Ä–µ–∑ eventBus
eventBus.on('notifyUser', (data) => {
    bot.telegram.sendMessage(data.userId, data.message, { parse_mode: 'HTML' }).catch(error => {
        console.error(`Error sending notification to user ${data.userId}:`, error);
    });
});

module.exports = { launchBot };
