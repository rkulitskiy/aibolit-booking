const axios = require('axios');
const database = require('./database');
const cron = require('node-cron');
const moment = require('moment');
const eventBus = require('./eventBus');
const providersManager = require('./providers/manager');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤
let lastMrtSlots = new Set();

async function updateDoctorsTimeSlots() {
    console.log('‚è∞ Starting to update doctor time slots...');
    
    await updateAibolitDoctorsTimeSlots();
    
    await updateLodeDoctorsTimeSlots();
    
    console.log('‚úÖ Finished updating doctor time slots');
}

async function updateAibolitDoctorsTimeSlots() {
    try {
        const doctors = await database.getEnabledDoctorsByProvider('aibolit');
        const dateStart = moment().format('YYYY-MM-DD');
        const dateEnd = moment().add(1, 'month').format('YYYY-MM-DD');

        console.log(`‚öïÔ∏è Updating slots for ${doctors.length} Aibolit.md doctors`);

    for (const doctor of doctors) {
        try {
            const response = await axios.get(`https://my2.aibolit.md/api/v2/my/providers/timetables`, {
                params: {
                    assignmentId: doctor.assignmentId,
                    dateStart,
                    dateEnd,
                    physicianId: doctor.physicianId
                }
            });

            if (response.data && response.data[0] && response.data[0].timetable) {
                const newSlots = response.data[0].timetable;
                newSlots.sort((a, b) => new Date(a.start) - new Date(b.start));

                const currentSlots = await database.getDoctorTimeSlots(doctor._id) || [];

                await database.updateDoctorTimeSlots(doctor._id, newSlots);

                const slotsToNotify = newSlots.filter(newSlot => !currentSlots.some(currentSlot => newSlot.id === currentSlot.id));

                if (slotsToNotify.length > 0) {
                    slotsToNotify.forEach(slot => notifyUsersAboutNewSlot(doctor, slot));
                    console.log(`Notified about new slots for doctor ${doctor.fullName} (Aibolit.md)`);
                }

                console.log(`Time slots updated for doctor ${doctor.fullName} (Aibolit.md)`);
            }
        } catch (error) {
            console.error(`Error updating time slots for doctor ${doctor.fullName} (Aibolit.md):`, error);
        }
    }
    } catch (dbError) {
        console.error('‚öïÔ∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è Aibolit.md:', dbError.message);
        console.log('‚öïÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä Aibolit.md');
    }
}

async function updateLodeDoctorsTimeSlots() {
    try {
        const doctors = await database.getEnabledDoctorsByProvider('lode');
        const dateStart = moment().format('YYYY-MM-DD');
        const dateEnd = moment().add(1, 'month').format('YYYY-MM-DD');

        console.log(`üè• Updating slots for ${doctors.length} –õ–û–î–≠ doctors`);

    const lodeProvider = providersManager.getProvider('lode');
    if (!lodeProvider) {
        console.error('–õ–û–î–≠ provider not found');
        return;
    }

    for (const doctor of doctors) {
        try {
            const newSlots = await lodeProvider.getDoctorSlots(doctor, dateStart, dateEnd);

            if (newSlots && newSlots.length > 0) {
                const currentSlots = await database.getDoctorTimeSlots(doctor._id) || [];

                await database.updateDoctorTimeSlots(doctor._id, newSlots);

                const slotsToNotify = newSlots.filter(newSlot => !currentSlots.some(currentSlot => newSlot.id === currentSlot.id));

                if (slotsToNotify.length > 0) {
                    slotsToNotify.forEach(slot => notifyUsersAboutNewSlot(doctor, slot));
                    console.log(`Notified about new slots for doctor ${doctor.fullName} (–õ–û–î–≠)`);
                }

                console.log(`Time slots updated for doctor ${doctor.fullName} (–õ–û–î–≠)`);
            }
        } catch (error) {
            console.error(`Error updating time slots for doctor ${doctor.fullName} (–õ–û–î–≠):`, error);
        }
    }
    } catch (dbError) {
        console.error('üè• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è –õ–û–î–≠:', dbError.message);
    }
}

async function checkMrtSlots() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ú–†–¢ —Å–ª–æ—Ç–æ–≤...');
        
        const today = moment();
        const endDate = moment().add(1, 'month'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        
        const startParam = today.format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
        const endParam = endDate.format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
        
        const response = await axios.get('https://z-api-lode.vot.by/getAllData', {
            params: {
                start: startParam,
                end: endParam,
                usluga: 39 // –ú–†–¢ –±–µ–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ —É—Å–∏–ª–µ–Ω–∏—è
            },
            headers: {
                'Accept': '*/*',
                'Accept-Language': 'ru-RU,ru;q=0.9',
                'Cache-Control': 'no-cache',
                'Connection': 'keep-alive',
                'Origin': 'https://www.lode.by',
                'Referer': 'https://www.lode.by/',
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36'
            }
        });
        
        if (response.data && response.data.tickets) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –ú–†–¢ —Å–ª–æ—Ç—ã (–ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞)
            const relevantSlots = response.data.tickets.filter(ticket => {
                return ticket.uslugs_ids && ticket.uslugs_ids.includes(39);
            });
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const workingHoursSlots = relevantSlots;
            
            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${workingHoursSlots.length} –ú–†–¢ —Å–ª–æ—Ç–æ–≤ (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
            const newSlots = workingHoursSlots.filter(slot => !lastMrtSlots.has(slot.id));
            
            if (newSlots.length > 0) {
                console.log(`üÜï –ù–∞–π–¥–µ–Ω–æ ${newSlots.length} –Ω–æ–≤—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤!`);
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–µ —Ä–∞–Ω–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏)
                newSlots.sort((a, b) => new Date(a.start || `${a.date}T${a.time}`) - new Date(b.start || `${b.date}T${b.time}`));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                newSlots.forEach(slot => lastMrtSlots.add(slot.id));
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Ä–∞–Ω–Ω–∏–µ –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ)
                const slotsToNotify = newSlots.length > 5 ? newSlots.slice(0, 5) : newSlots;
                slotsToNotify.forEach(slot => notifyUsersAboutNewMrtSlot(slot));
                
                if (newSlots.length > 5) {
                    console.log(`üìù –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–≤—ã—Ö 5 —Å–ª–æ—Ç–∞—Ö –∏–∑ ${newSlots.length} –Ω–æ–≤—ã—Ö`);
                }
            } else {
                console.log(`‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í –ø–∞–º—è—Ç–∏: ${lastMrtSlots.size} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ú–†–¢ —Å–ª–æ—Ç–æ–≤:', error.message);
    }
}

function notifyUsersAboutNewMrtSlot(slot) {
    const formattedDate = `${slot.date} ${slot.time}`;
    
    let message = `ü©ª <b>–ù–û–í–´–ô –°–õ–û–¢ –ú–†–¢ –ë–ï–ó –ö–û–ù–¢–†–ê–°–¢–ê!</b>\n`;
    message += `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>${formattedDate}</b>\n`;
    message += `üè• –ú–µ–¥—Ü–µ–Ω—Ç—Ä: –õ–û–î–≠\n`;
    message += `üÜî ID —Å–ª–æ—Ç–∞: ${slot.id}\n`;
    message += `\n‚ö° –ë—ã—Å—Ç—Ä–µ–µ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å!`;

    database.getAllUsers().then(users => {
        users.forEach(user => {
            eventBus.emit('notifyUser', { userId: user.id, message: message });
        });
    }).catch(error => {
        console.error(`Error notifying users about new MRT slot:`, error);
    });
}

function notifyUsersAboutNewSlot(doctor, slot) {
    let formattedDate;
    
    if (doctor.provider === 'lode') {
        formattedDate = `${slot.date} ${slot.time}`;
    } else {
        const localTime = moment(slot.start).utcOffset('+03:00');
        formattedDate = localTime.format('DD.MM.YYYY HH:mm');
    }
    
    const providerIcon = doctor.provider === 'lode' ? 'üè•' : '‚öïÔ∏è';
    const providerName = doctor.provider === 'lode' ? '–õ–û–î–≠' : 'Aibolit.md';
    
    let message = `üïí –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π —Å–ª–æ—Ç —É –¥–æ–∫—Ç–æ—Ä–∞ ${doctor.fullName} (${doctor.position}): <b>${formattedDate}</b>\n`;
    message += `${providerIcon} –ú–µ–¥—Ü–µ–Ω—Ç—Ä: ${providerName}`;
    
    if (doctor.center) {
        message += `\nüìç ${doctor.center}`;
    }

    database.getAllUsers().then(users => {
        users.forEach(user => {
            eventBus.emit('notifyUser', { userId: user.id, message: message });
        });
    }).catch(error => {
        console.error(`Error notifying users about new slot:`, error);
    });
}

// –û—Å–Ω–æ–≤–Ω–æ–π cron –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–æ–∫—Ç–æ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
cron.schedule('*/5 * * * *', async () => {
    console.log('‚è∞ Starting scheduled task:', moment().format('YYYY-MM-DD HH:mm:ss'));
    await updateDoctorsTimeSlots();
});

// –û—Ç–¥–µ–ª—å–Ω—ã–π cron –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ú–†–¢ —Å–ª–æ—Ç–æ–≤ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
cron.schedule('* * * * *', async () => {
    console.log('ü©ª Starting MRT slots check:', moment().format('YYYY-MM-DD HH:mm:ss'));
    await checkMrtSlots();
});

console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: */5 * * * *');
console.log('ü©ª –ú–†–¢ –º–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: * * * * * (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');

eventBus.on('update-schedule', updateDoctorsTimeSlots);

module.exports = { updateDoctorsTimeSlots, checkMrtSlots };
