const axios = require('axios');
const database = require('./database');
const cron = require('node-cron');
const moment = require('moment');
const eventBus = require('./eventBus');
const providersManager = require('./providers/manager');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤
let lastMrtSlots = new Set();
let isFirstMrtCheck = true; // –§–ª–∞–≥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–†–¢ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ ENV
const MRT_MONITORING_ENABLED = process.env.MRT_MONITORING_ENABLED !== 'false'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
const MRT_REQUIRE_CONSECUTIVE_SLOTS = process.env.MRT_REQUIRE_CONSECUTIVE_SLOTS === 'true';

function findConsecutiveSlots(slots) {
    const consecutivePairs = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–µ
    const slotsByDate = {};
    slots.forEach(slot => {
        if (!slotsByDate[slot.date]) {
            slotsByDate[slot.date] = [];
        }
        slotsByDate[slot.date].push(slot);
    });
    
    // –ò—â–µ–º –ø–∞—Ä–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    Object.keys(slotsByDate).forEach(date => {
        const daySlots = slotsByDate[date];
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        daySlots.sort((a, b) => a.time.localeCompare(b.time));
        
        // –ò—â–µ–º –ø–∞—Ä—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
        for (let i = 0; i < daySlots.length - 1; i++) {
            const currentSlot = daySlots[i];
            const nextSlot = daySlots[i + 1];
            
            const currentTime = moment(`${date}T${currentSlot.time}`);
            const nextTime = moment(`${date}T${nextSlot.time}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
            const diffMinutes = nextTime.diff(currentTime, 'minutes');
            if (diffMinutes === 30) {
                consecutivePairs.push({
                    slot1: currentSlot,
                    slot2: nextSlot,
                    date: date,
                    startTime: currentSlot.time,
                    endTime: nextSlot.time
                });
            }
        }
    });
    
    return consecutivePairs;
}

function clearMrtSlotsMemory() {
    const previousSize = lastMrtSlots.size;
    const previousPairsSize = global.lastMrtPairs ? global.lastMrtPairs.size : 0;
    
    lastMrtSlots.clear();
    if (global.lastMrtPairs) {
        global.lastMrtPairs.clear();
    }
    isFirstMrtCheck = true; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    console.log(`üßπ –ü–∞–º—è—Ç—å –ú–†–¢ —Å–ª–æ—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞. –ë—ã–ª–æ: ${previousSize} —Å–ª–æ—Ç–æ–≤, ${previousPairsSize} –ø–∞—Ä`);
    console.log(`‚ÑπÔ∏è –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è`);
    return `–û—á–∏—â–µ–Ω–æ ${previousSize} —Å–ª–æ—Ç–æ–≤ –∏ ${previousPairsSize} –ø–∞—Ä –∏–∑ –ø–∞–º—è—Ç–∏`;
}

async function updateDoctorsTimeSlots() {
    const startTime = Date.now();
    console.log('‚è∞ Starting to update doctor time slots...');
    
    await updateAibolitDoctorsTimeSlots();
    
    await updateLodeDoctorsTimeSlots();
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚úÖ Finished updating doctor time slots (${duration}ms)`);
}

async function updateAibolitDoctorsTimeSlots() {
    try {
        const doctors = await database.getEnabledDoctorsByProvider('aibolit');
        const dateStart = moment().format('YYYY-MM-DD');
        const dateEnd = moment().add(1, 'month').format('YYYY-MM-DD');

        console.log(`‚öïÔ∏è Updating slots for ${doctors.length} Aibolit.md doctors`);

    for (const doctor of doctors) {
        try {
            const response = await axios.get(`https://my2.aibolit.md/api/v2/my/providers/timetables`, {
                params: {
                    assignmentId: doctor.assignmentId,
                    dateStart,
                    dateEnd,
                    physicianId: doctor.physicianId
                }
            });

            if (response.data && response.data[0] && response.data[0].timetable) {
                const newSlots = response.data[0].timetable;
                newSlots.sort((a, b) => new Date(a.start) - new Date(b.start));

                const currentSlots = await database.getDoctorTimeSlots(doctor._id) || [];

                await database.updateDoctorTimeSlots(doctor._id, newSlots);

                const slotsToNotify = newSlots.filter(newSlot => !currentSlots.some(currentSlot => newSlot.id === currentSlot.id));

                if (slotsToNotify.length > 0) {
                    slotsToNotify.forEach(slot => notifyUsersAboutNewSlot(doctor, slot));
                    console.log(`Notified about new slots for doctor ${doctor.fullName} (Aibolit.md)`);
                }

                console.log(`Time slots updated for doctor ${doctor.fullName} (Aibolit.md)`);
            }
        } catch (error) {
            console.error(`Error updating time slots for doctor ${doctor.fullName} (Aibolit.md):`, error);
        }
    }
    } catch (dbError) {
        console.error('‚öïÔ∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è Aibolit.md:', dbError.message);
        console.log('‚öïÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä Aibolit.md');
    }
}

async function updateLodeDoctorsTimeSlots() {
    try {
        const doctors = await database.getEnabledDoctorsByProvider('lode');
        const dateStart = moment().format('YYYY-MM-DD');
        const dateEnd = moment().add(1, 'month').format('YYYY-MM-DD');

        console.log(`üè• Updating slots for ${doctors.length} –õ–û–î–≠ doctors`);

    const lodeProvider = providersManager.getProvider('lode');
    if (!lodeProvider) {
        console.error('–õ–û–î–≠ provider not found');
        return;
    }

    for (const doctor of doctors) {
        try {
            const newSlots = await lodeProvider.getDoctorSlots(doctor, dateStart, dateEnd);

            if (newSlots && newSlots.length > 0) {
                const currentSlots = await database.getDoctorTimeSlots(doctor._id) || [];

                await database.updateDoctorTimeSlots(doctor._id, newSlots);

                const slotsToNotify = newSlots.filter(newSlot => !currentSlots.some(currentSlot => newSlot.id === currentSlot.id));

                if (slotsToNotify.length > 0) {
                    slotsToNotify.forEach(slot => notifyUsersAboutNewSlot(doctor, slot));
                    console.log(`Notified about new slots for doctor ${doctor.fullName} (–õ–û–î–≠)`);
                }

                console.log(`Time slots updated for doctor ${doctor.fullName} (–õ–û–î–≠)`);
            }
        } catch (error) {
            console.error(`Error updating time slots for doctor ${doctor.fullName} (–õ–û–î–≠):`, error);
        }
    }
    } catch (dbError) {
        console.error('üè• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è –õ–û–î–≠:', dbError.message);
    }
}

async function checkMrtSlots() {
    const startTime = Date.now();
    try {
        console.log(`üîç [${moment().format('HH:mm:ss')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ú–†–¢ —Å–ª–æ—Ç–æ–≤...`);
        
        const today = moment();
        const endDate = moment().add(1, 'month'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        
        const startParam = today.format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
        const endParam = endDate.format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
        
        console.log(`üì° [${moment().format('HH:mm:ss')}] –ó–∞–ø—Ä–æ—Å –∫ API Lode: ${startParam} ‚Üí ${endParam}`);
        const apiStartTime = Date.now();
        
        const response = await axios.get('https://z-api-lode.vot.by/getAllData', {
            params: {
                start: startParam,
                end: endParam,
                usluga: 39 // –ú–†–¢ –±–µ–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ —É—Å–∏–ª–µ–Ω–∏—è
            },
            headers: {
                'Accept': '*/*',
                'Accept-Language': 'ru-RU,ru;q=0.9',
                'Cache-Control': 'no-cache',
                'Connection': 'keep-alive',
                'Origin': 'https://www.lode.by',
                'Referer': 'https://www.lode.by/',
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36'
            }
        });
        
        const apiEndTime = Date.now();
        const apiDuration = apiEndTime - apiStartTime;
        console.log(`üì° [${moment().format('HH:mm:ss')}] API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${apiDuration}ms`);
        
        if (response.data && response.data.tickets) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –ú–†–¢ —Å–ª–æ—Ç—ã (–ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞)
            const relevantSlots = response.data.tickets.filter(ticket => {
                return ticket.uslugs_ids && ticket.uslugs_ids.includes(39);
            });
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const workingHoursSlots = relevantSlots;
            
            console.log(`üîç [${moment().format('HH:mm:ss')}] –ù–∞–π–¥–µ–Ω–æ ${workingHoursSlots.length} –ú–†–¢ —Å–ª–æ—Ç–æ–≤ (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
            const newSlots = workingHoursSlots.filter(slot => !lastMrtSlots.has(slot.id));
            
            if (newSlots.length > 0) {
                console.log(`üÜï [${moment().format('HH:mm:ss')}] –ù–∞–π–¥–µ–Ω–æ ${newSlots.length} –Ω–æ–≤—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤!`);
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–µ —Ä–∞–Ω–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏)
                newSlots.sort((a, b) => new Date(a.start || `${a.date}T${a.time}`) - new Date(b.start || `${b.date}T${b.time}`));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                newSlots.forEach(slot => lastMrtSlots.add(slot.id));
                
                if (isFirstMrtCheck) {
                    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç—ã, –Ω–æ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º
                    console.log(`üìù [${moment().format('HH:mm:ss')}] –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${newSlots.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å`);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    const today = moment();
                    const nearSlots = newSlots.filter(slot => {
                        const slotDate = moment(slot.date);
                        const daysDiff = slotDate.diff(today, 'days');
                        return daysDiff >= 0 && daysDiff <= 3;
                    });
                    
                    if (nearSlots.length > 0) {
                        if (MRT_REQUIRE_CONSECUTIVE_SLOTS) {
                            // –ò—â–µ–º –ø–∞—Ä–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –±–ª–∏–∂–∞–π—à–∏—Ö
                            const nearConsecutivePairs = findConsecutiveSlots(nearSlots);
                            
                            console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ú–†–¢ —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è (${nearSlots.length} —à—Ç.):`);
                            nearSlots.slice(0, 10).forEach((slot, index) => {
                                const daysFromNow = moment(slot.date).diff(today, 'days');
                                const dayText = daysFromNow === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : 
                                              daysFromNow === 1 ? '–∑–∞–≤—Ç—Ä–∞' : 
                                              daysFromNow === 2 ? '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' : 
                                              `—á–µ—Ä–µ–∑ ${daysFromNow} –¥–Ω—è`;
                                console.log(`  ${index + 1}. ${slot.date} ${slot.time} (${dayText})`);
                            });
                            if (nearSlots.length > 10) {
                                console.log(`  ... –∏ –µ—â–µ ${nearSlots.length - 10} —Å–ª–æ—Ç–æ–≤`);
                            }
                            
                            if (nearConsecutivePairs.length > 0) {
                                console.log(`\nüî• –ù–∞–π–¥–µ–Ω–æ ${nearConsecutivePairs.length} –ø–∞—Ä–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–æ—Å—É–¥–∏—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:`);
                                nearConsecutivePairs.slice(0, 5).forEach((pair, index) => {
                                    const daysFromNow = moment(pair.date).diff(today, 'days');
                                    const dayText = daysFromNow === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : 
                                                  daysFromNow === 1 ? '–∑–∞–≤—Ç—Ä–∞' : 
                                                  daysFromNow === 2 ? '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' : 
                                                  `—á–µ—Ä–µ–∑ ${daysFromNow} –¥–Ω—è`;
                                    console.log(`  ${index + 1}. ${pair.date} ${pair.startTime}-${pair.endTime} (${dayText}) - 1 –ß–ê–°`);
                                });
                            } else {
                                console.log(`\n‚ö†Ô∏è –ü–∞—Ä–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                            }
                        } else {
                            console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ú–†–¢ —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è (${nearSlots.length} —à—Ç.):`);
                            nearSlots.slice(0, 10).forEach((slot, index) => {
                                const daysFromNow = moment(slot.date).diff(today, 'days');
                                const dayText = daysFromNow === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : 
                                              daysFromNow === 1 ? '–∑–∞–≤—Ç—Ä–∞' : 
                                              daysFromNow === 2 ? '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' : 
                                              `—á–µ—Ä–µ–∑ ${daysFromNow} –¥–Ω—è`;
                                console.log(`  ${index + 1}. ${slot.date} ${slot.time} (${dayText})`);
                            });
                            if (nearSlots.length > 10) {
                                console.log(`  ... –∏ –µ—â–µ ${nearSlots.length - 10} —Å–ª–æ—Ç–æ–≤`);
                            }
                        }
                    } else {
                        console.log(`‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è`);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
                        if (newSlots.length > 0) {
                            const earliestSlot = newSlots[0]; // —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ
                            const daysFromNow = moment(earliestSlot.date).diff(today, 'days');
                            console.log(`üìÖ –ë–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç: ${earliestSlot.date} ${earliestSlot.time} (—á–µ—Ä–µ–∑ ${daysFromNow} –¥–Ω–µ–π)`);
                        }
                    }
                    
                    isFirstMrtCheck = false;
                } else {
                    // –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö
                    if (MRT_REQUIRE_CONSECUTIVE_SLOTS) {
                        // –†–µ–∂–∏–º –ø–∞—Ä–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ - –∏—â–µ–º –ø–∞—Ä—ã —Å—Ä–µ–¥–∏ –í–°–ï–• —Å–ª–æ—Ç–æ–≤, –Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
                        const allConsecutivePairs = findConsecutiveSlots(workingHoursSlots);
                        
                        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                        const pairKey = (pair) => `${pair.date}_${pair.startTime}_${pair.endTime}`;
                        
                        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ)
                        if (!global.lastMrtPairs) {
                            global.lastMrtPairs = new Set();
                        }
                        
                        const newPairs = allConsecutivePairs.filter(pair => !global.lastMrtPairs.has(pairKey(pair)));
                        
                        if (newPairs.length > 0) {
                            console.log(`üî• [${moment().format('HH:mm:ss')}] –ù–∞–π–¥–µ–Ω–æ ${newPairs.length} –Ω–æ–≤—ã—Ö –ø–∞—Ä–Ω—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤ (–¥–ª—è —Å–æ—Å—É–¥–∏—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã)!`);
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä
                            newPairs.forEach(pair => global.lastMrtPairs.add(pairKey(pair)));
                            
                            const pairsToNotify = newPairs.length > 3 ? newPairs.slice(0, 3) : newPairs;
                            pairsToNotify.forEach(pair => notifyUsersAboutNewMrtConsecutiveSlots(pair));
                            
                            if (newPairs.length > 3) {
                                console.log(`üìù –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–≤—ã—Ö 3 –ø–∞—Ä–∞—Ö –∏–∑ ${newPairs.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö`);
                            }
                        } else if (newSlots.length > 0) {
                            console.log(`‚ÑπÔ∏è –ù–æ–≤—ã–µ –ú–†–¢ —Å–ª–æ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã (${newSlots.length}), –Ω–æ –Ω–æ–≤—ã—Ö –ø–∞—Ä–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç`);
                        }
                    } else {
                        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö
                        const slotsToNotify = newSlots.length > 5 ? newSlots.slice(0, 5) : newSlots;
                        slotsToNotify.forEach(slot => notifyUsersAboutNewMrtSlot(slot));
                        
                        if (newSlots.length > 5) {
                            console.log(`üìù –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–≤—ã—Ö 5 —Å–ª–æ—Ç–∞—Ö –∏–∑ ${newSlots.length} –Ω–æ–≤—ã—Ö`);
                        }
                    }
                }
            } else {
                console.log(`‚ÑπÔ∏è [${moment().format('HH:mm:ss')}] –ù–æ–≤—ã—Ö –ú–†–¢ —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í –ø–∞–º—è—Ç–∏: ${lastMrtSlots.size} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ú–†–¢ —Å–ª–æ—Ç–æ–≤:', error.message);
    } finally {
        const endTime = Date.now();
        const duration = endTime - startTime;
        console.log(`‚úÖ [${moment().format('HH:mm:ss')}] –ú–†–¢ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`);
    }
}

function notifyUsersAboutNewMrtSlot(slot) {
    const formattedDate = `${slot.date} ${slot.time}`;
    
    let message = `ü©ª <b>–ù–û–í–´–ô –°–õ–û–¢ –ú–†–¢ –ë–ï–ó –ö–û–ù–¢–†–ê–°–¢–ê!</b>\n`;
    message += `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>${formattedDate}</b>\n`;
    message += `üè• –ú–µ–¥—Ü–µ–Ω—Ç—Ä: –õ–û–î–≠\n`;

    database.getAllUsers().then(users => {
        users.forEach(user => {
            eventBus.emit('notifyUser', { userId: user.id, message: message });
        });
    }).catch(error => {
        console.error(`Error notifying users about new MRT slot:`, error);
    });
}

function notifyUsersAboutNewMrtConsecutiveSlots(consecutivePair) {
    const startTimeFormatted = consecutivePair.startTime.replace(':', '.');
    const endTimeFormatted = consecutivePair.endTime.replace(':', '.');
    
    let message = `ü©ª <b>–ù–û–í–´–ï –ü–ê–†–ù–´–ï –°–õ–û–¢–´ –ú–†–¢!</b>\n`;
    message += `üìÖ –î–∞—Ç–∞: <b>${consecutivePair.date}</b>\n`;
    message += `üïê –í—Ä–µ–º—è: <b>${startTimeFormatted} –∏ ${endTimeFormatted}</b>\n`;
    message += `üè• –ú–µ–¥—Ü–µ–Ω—Ç—Ä: –õ–û–î–≠\n`;

    database.getAllUsers().then(users => {
        users.forEach(user => {
            eventBus.emit('notifyUser', { userId: user.id, message: message });
        });
    }).catch(error => {
        console.error(`Error notifying users about new consecutive MRT slots:`, error);
    });
}

function notifyUsersAboutNewSlot(doctor, slot) {
    let formattedDate;
    
    if (doctor.provider === 'lode') {
        formattedDate = `${slot.date} ${slot.time}`;
    } else {
        const localTime = moment(slot.start).utcOffset('+03:00');
        formattedDate = localTime.format('DD.MM.YYYY HH:mm');
    }
    
    const providerIcon = doctor.provider === 'lode' ? 'üè•' : '‚öïÔ∏è';
    const providerName = doctor.provider === 'lode' ? '–õ–û–î–≠' : 'Aibolit.md';
    
    let message = `üïí –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π —Å–ª–æ—Ç —É –¥–æ–∫—Ç–æ—Ä–∞ ${doctor.fullName} (${doctor.position}): <b>${formattedDate}</b>\n`;
    message += `${providerIcon} –ú–µ–¥—Ü–µ–Ω—Ç—Ä: ${providerName}`;
    
    if (doctor.center) {
        message += `\nüìç ${doctor.center}`;
    }

    database.getAllUsers().then(users => {
        users.forEach(user => {
            eventBus.emit('notifyUser', { userId: user.id, message: message });
        });
    }).catch(error => {
        console.error(`Error notifying users about new slot:`, error);
    });
}

// –û—Å–Ω–æ–≤–Ω–æ–π cron –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–æ–∫—Ç–æ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
cron.schedule('*/2 * * * *', async () => {
    console.log('‚è∞ Starting scheduled task:', moment().format('YYYY-MM-DD HH:mm:ss'));
    await updateDoctorsTimeSlots();
});

// –û—Ç–¥–µ–ª—å–Ω—ã–π cron –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ú–†–¢ —Å–ª–æ—Ç–æ–≤ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
if (MRT_MONITORING_ENABLED) {
    cron.schedule('* * * * *', async () => {
        console.log('ü©ª Starting MRT slots check:', moment().format('YYYY-MM-DD HH:mm:ss'));
        await checkMrtSlots();
    });
}

console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: */5 * * * *');

if (MRT_MONITORING_ENABLED) {
    console.log('ü©ª –ú–†–¢ –º–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: * * * * * (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');
    console.log(`üîß –ú–†–¢ —Ä–µ–∂–∏–º: ${MRT_REQUIRE_CONSECUTIVE_SLOTS ? '–ü–ê–†–ù–´–ï –°–õ–û–¢–´ (–¥–ª—è —Å–æ—Å—É–¥–∏—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã)' : '–í–°–ï –°–õ–û–¢–´'}`);
} else {
    console.log('üö´ –ú–†–¢ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –û–¢–ö–õ–Æ–ß–ï–ù (MRT_MONITORING_ENABLED=false)');
}

eventBus.on('update-schedule', updateDoctorsTimeSlots);

module.exports = { updateDoctorsTimeSlots, checkMrtSlots, clearMrtSlotsMemory };
