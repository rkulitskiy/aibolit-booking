// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ —É –≤—Ä–∞—á–∞ –õ–û–î–≠ –∏ —É –≤—Ä–∞—á–∞ Aibolit –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
require('dotenv').config();
const { MongoClient } = require('mongodb');
const moment = require('moment');

async function removeSlotForTesting() {
    const client = new MongoClient(process.env.MONGODB_URI);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
        
        const db = client.db('aibolit-booking');
        const doctorsCollection = db.collection('doctors');
        const timeSlotsCollection = db.collection('timeSlots');
        
        // –ù–∞–π–¥–µ–º –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞ Aibolit
        const aibolitDoctor = await doctorsCollection.findOne({
            provider: 'aibolit',
            isEnabled: true
        });
        
        // –ù–∞–π–¥–µ–º –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –õ–û–î–≠
        const lodeDoctor = await doctorsCollection.findOne({
            provider: 'lode',
            isEnabled: true
        });
        
        let removedCount = 0;
        
        // –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç —É –≤—Ä–∞—á–∞ Aibolit
        if (aibolitDoctor) {
            removedCount += await removeSlotFromDoctor(db, aibolitDoctor, 'Aibolit');
        } else {
            console.log('‚ö†Ô∏è –í–∫–ª—é—á–µ–Ω–Ω—ã–π –≤—Ä–∞—á Aibolit –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç —É –≤—Ä–∞—á–∞ –õ–û–î–≠
        if (lodeDoctor) {
            removedCount += await removeSlotFromDoctor(db, lodeDoctor, '–õ–û–î–≠');
        } else {
            console.log('‚ö†Ô∏è –í–∫–ª—é—á–µ–Ω–Ω—ã–π –≤—Ä–∞—á –õ–û–î–≠ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (removedCount === 0) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞');
            return;
        }
        
        console.log('');
        console.log('üîî –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —ç—Ç–∏ —Å–ª–æ—Ç—ã –¥–æ–ª–∂–Ω—ã:');
        console.log('   1. –ë—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
        console.log('   2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ "–Ω–æ–≤—ã–µ"');
        console.log('   3. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞');
        console.log('');
        console.log('‚è∞ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await client.close();
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç MongoDB');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞
async function removeSlotFromDoctor(db, doctor, providerName) {
    const timeSlotsCollection = db.collection('timeSlots');
    
    // –ù–∞–π–¥–µ–º —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ timeSlots
    const timeSlotsDoc = await timeSlotsCollection.findOne({ doctorId: doctor._id });
    
    if (!timeSlotsDoc || !timeSlotsDoc.slots || timeSlotsDoc.slots.length === 0) {
        console.log(`‚ö†Ô∏è –£ –≤—Ä–∞—á–∞ ${providerName} (${doctor.fullName}) –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
        return 0;
    }
    
    console.log(`\nüè• ${providerName}: ${doctor.fullName}`);
    console.log(`üìÖ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: ${timeSlotsDoc.slots.length}`);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç
    const slotToRemove = timeSlotsDoc.slots[timeSlotsDoc.slots.length - 1];
    
    const result = await timeSlotsCollection.updateOne(
        { doctorId: doctor._id },
        { $pull: { slots: { id: slotToRemove.id } } }
    );
    
    if (result.modifiedCount > 0) {
        console.log('‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if (providerName === '–õ–û–î–≠') {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–ª–æ—Ç: ${slotToRemove.date} ${slotToRemove.time}`);
        } else {
            // –î–ª—è Aibolit –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC
            const slotTime = moment(slotToRemove.start).format('DD.MM.YYYY HH:mm');
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–ª–æ—Ç: ${slotTime}`);
        }
        
        console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${timeSlotsDoc.slots.length - 1}`);
        return 1;
    } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç —É –≤—Ä–∞—á–∞ ${providerName}`);
        return 0;
    }
}

// –ó–∞–ø—É—Å–∫
removeSlotForTesting().catch(console.error); 