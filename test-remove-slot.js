// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤—Ä–∞—á–∞ –õ–û–î–≠ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const { MongoClient } = require('mongodb');

async function removeSlotForTesting() {
    const client = new MongoClient('mongodb://localhost:27017');
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
        
        const db = client.db('aibolit-booking');
        const doctorsCollection = db.collection('doctors');
        const timeSlotsCollection = db.collection('timeSlots');
        
        // –ù–∞–π–¥–µ–º –≤—Ä–∞—á–∞ –õ–û–î–≠
        const doctor = await doctorsCollection.findOne({
            provider: 'lode'
        });
        
        if (!doctor) {
            console.log('‚ùå –í—Ä–∞—á –õ–û–î–≠ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ù–∞–π–¥–µ–º —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ timeSlots
        const timeSlotsDoc = await timeSlotsCollection.findOne({ doctorId: doctor._id });
        
        if (!timeSlotsDoc || !timeSlotsDoc.slots || timeSlotsDoc.slots.length === 0) {
            console.log('‚ö†Ô∏è –£ –≤—Ä–∞—á–∞ –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
        }
        
        console.log(`üè• –ù–∞–π–¥–µ–Ω –≤—Ä–∞—á: ${doctor.fullName}`);
        console.log(`üìÖ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: ${timeSlotsDoc.slots.length}`);
        
        // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç
        const slotToRemove = timeSlotsDoc.slots[timeSlotsDoc.slots.length - 1];
        
        const result = await timeSlotsCollection.updateOne(
            { doctorId: doctor._id },
            { $pull: { slots: { id: slotToRemove.id } } }
        );
        
        if (result.modifiedCount > 0) {
            console.log('‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–ª–æ—Ç: ${slotToRemove.date} ${slotToRemove.time}`);
            console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${timeSlotsDoc.slots.length - 1}`);
            console.log('');
            console.log('üîî –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç –¥–æ–ª–∂–µ–Ω:');
            console.log('   1. –ë—ã—Ç—å –Ω–∞–π–¥–µ–Ω —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ API –õ–û–î–≠');
            console.log('   2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ "–Ω–æ–≤—ã–π"');
            console.log('   3. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞');
            console.log('');
            console.log('‚è∞ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await client.close();
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç MongoDB');
    }
}

// –ó–∞–ø—É—Å–∫
removeSlotForTesting().catch(console.error); 